// Generated by CoffeeScript 1.6.3
(function() {
  var Board, Cell, Piece, Player, ROWLENGTH, init, min, player1, s, squareSize;

  console.log(window.screen.availWidth, window.screen.availHeight);

  ROWLENGTH = 8;

  min = _.min([window.screen.availWidth, window.screen.availHeight]);

  s = Snap(min, min);

  s.rect(0, 0, min, min);

  squareSize = min / ROWLENGTH;

  Cell = (function() {
    function Cell(x, y) {
      this.x = x;
      this.y = y;
      this.tl = this.getStep(this.x - 1, this.y - 1);
      this.tr = this.getStep(this.x + 1, this.y - 1);
      this.bl = this.getStep(this.x - 1, this.y + 1);
      this.bt = this.getStep(this.x + 1, this.y + 1);
    }

    Cell.prototype.getStep = function(x, y) {
      var a, b;
      a = this.checkRowConstraints(x, 0, ROWLENGTH);
      b = this.checkRowConstraints(y, 0, ROWLENGTH);
      if (a && b) {
        return [x, y];
      }
    };

    Cell.prototype.checkRowConstraints = function(x, min, max) {
      if (x < min || x > max) {
        return false;
      } else {
        return true;
      }
    };

    return Cell;

  })();

  Board = (function() {
    function Board(player1, player2) {
      this.player1 = player1;
      this.player2 = player2;
      this.cells = [];
      this.draw();
    }

    Board.prototype.addCell = function(cell) {
      return this.cells.push(cell);
    };

    Board.prototype.draw = function(row, col) {
      var cell, rect, _results;
      if (row == null) {
        row = 0;
      }
      if (col == null) {
        col = 0;
      }
      _results = [];
      while (row < ROWLENGTH) {
        col = 0;
        while (col < ROWLENGTH) {
          rect = s.rect(col * squareSize, row * squareSize, squareSize, squareSize);
          rect.attr({
            fill: ((row * ROWLENGTH) + col + row) % 2 ? "#FF0000" : "#FFFFFF"
          });
          cell = new Cell(col, row);
          this.addCell(cell);
          player1.checkDraw(cell);
          col += 1;
        }
        _results.push(row += 1);
      }
      return _results;
    };

    return Board;

  })();

  Piece = (function() {
    function Piece(x, y) {
      this.x = x;
      this.y = y;
    }

    Piece.prototype.draw = function() {};

    return Piece;

  })();

  Player = (function() {
    function Player(positions) {
      this.positions = positions;
      this.pieces = [];
    }

    Player.prototype.checkDraw = function(cell, elem) {
      if (elem == null) {
        elem = null;
      }
      console.log(this.positions, (cell.y * ROWLENGTH) + cell.x);
      if (this.positions[(cell.y * ROWLENGTH) + cell.x]) {
        this.pieces = new Piece(x, y);
        elem = s.circle(cell.x * squareSize + (squareSize / 2), cell.y * squareSize + (squareSize / 2), squareSize / 2);
        elem.attr({
          fill: "#000000"
        });
        elem.mousedown(function() {});
        return elem.mousemove(function(e, x, y) {
          if (this.oldx && this.oldy) {
            this.dx = x - this.oldx;
            this.dy = y - this.oldy;
            this.elem.animate({
              x: x,
              y: y
            }, 500);
          }
          this.oldx = x;
          return this.oldy = y;
        });
      }
    };

    return Player;

  })();

  player1 = new Player([0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1]);

  init = function() {
    var board;
    return board = new Board(player1);
  };

  init();

}).call(this);
